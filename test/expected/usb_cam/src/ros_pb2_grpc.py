# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import ros_pb2 as ros__pb2


class image_view_outputStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Publish = channel.unary_unary(
                '/ros.image_view_output/Publish',
                request_serializer=ros__pb2.sensor_msgs.Image.SerializeToString,
                response_deserializer=ros__pb2.Empty.FromString,
                )
        self.Subscribe = channel.unary_stream(
                '/ros.image_view_output/Subscribe',
                request_serializer=ros__pb2.Empty.SerializeToString,
                response_deserializer=ros__pb2.sensor_msgs.Image.FromString,
                )


class image_view_outputServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Publish(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Subscribe(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_image_view_outputServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Publish': grpc.unary_unary_rpc_method_handler(
                    servicer.Publish,
                    request_deserializer=ros__pb2.sensor_msgs.Image.FromString,
                    response_serializer=ros__pb2.Empty.SerializeToString,
            ),
            'Subscribe': grpc.unary_stream_rpc_method_handler(
                    servicer.Subscribe,
                    request_deserializer=ros__pb2.Empty.FromString,
                    response_serializer=ros__pb2.sensor_msgs.Image.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ros.image_view_output', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class image_view_output(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Publish(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ros.image_view_output/Publish',
            ros__pb2.sensor_msgs.Image.SerializeToString,
            ros__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Subscribe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/ros.image_view_output/Subscribe',
            ros__pb2.Empty.SerializeToString,
            ros__pb2.sensor_msgs.Image.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class image_view_parameter_descriptionsStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Publish = channel.unary_unary(
                '/ros.image_view_parameter_descriptions/Publish',
                request_serializer=ros__pb2.dynamic_reconfigure.ConfigDescription.SerializeToString,
                response_deserializer=ros__pb2.Empty.FromString,
                )
        self.Subscribe = channel.unary_stream(
                '/ros.image_view_parameter_descriptions/Subscribe',
                request_serializer=ros__pb2.Empty.SerializeToString,
                response_deserializer=ros__pb2.dynamic_reconfigure.ConfigDescription.FromString,
                )


class image_view_parameter_descriptionsServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Publish(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Subscribe(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_image_view_parameter_descriptionsServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Publish': grpc.unary_unary_rpc_method_handler(
                    servicer.Publish,
                    request_deserializer=ros__pb2.dynamic_reconfigure.ConfigDescription.FromString,
                    response_serializer=ros__pb2.Empty.SerializeToString,
            ),
            'Subscribe': grpc.unary_stream_rpc_method_handler(
                    servicer.Subscribe,
                    request_deserializer=ros__pb2.Empty.FromString,
                    response_serializer=ros__pb2.dynamic_reconfigure.ConfigDescription.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ros.image_view_parameter_descriptions', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class image_view_parameter_descriptions(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Publish(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ros.image_view_parameter_descriptions/Publish',
            ros__pb2.dynamic_reconfigure.ConfigDescription.SerializeToString,
            ros__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Subscribe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/ros.image_view_parameter_descriptions/Subscribe',
            ros__pb2.Empty.SerializeToString,
            ros__pb2.dynamic_reconfigure.ConfigDescription.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class image_view_parameter_updatesStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Publish = channel.unary_unary(
                '/ros.image_view_parameter_updates/Publish',
                request_serializer=ros__pb2.dynamic_reconfigure.Config.SerializeToString,
                response_deserializer=ros__pb2.Empty.FromString,
                )
        self.Subscribe = channel.unary_stream(
                '/ros.image_view_parameter_updates/Subscribe',
                request_serializer=ros__pb2.Empty.SerializeToString,
                response_deserializer=ros__pb2.dynamic_reconfigure.Config.FromString,
                )


class image_view_parameter_updatesServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Publish(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Subscribe(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_image_view_parameter_updatesServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Publish': grpc.unary_unary_rpc_method_handler(
                    servicer.Publish,
                    request_deserializer=ros__pb2.dynamic_reconfigure.Config.FromString,
                    response_serializer=ros__pb2.Empty.SerializeToString,
            ),
            'Subscribe': grpc.unary_stream_rpc_method_handler(
                    servicer.Subscribe,
                    request_deserializer=ros__pb2.Empty.FromString,
                    response_serializer=ros__pb2.dynamic_reconfigure.Config.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ros.image_view_parameter_updates', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class image_view_parameter_updates(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Publish(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ros.image_view_parameter_updates/Publish',
            ros__pb2.dynamic_reconfigure.Config.SerializeToString,
            ros__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Subscribe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/ros.image_view_parameter_updates/Subscribe',
            ros__pb2.Empty.SerializeToString,
            ros__pb2.dynamic_reconfigure.Config.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class rosoutStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Publish = channel.unary_unary(
                '/ros.rosout/Publish',
                request_serializer=ros__pb2.rosgraph_msgs.Log.SerializeToString,
                response_deserializer=ros__pb2.Empty.FromString,
                )
        self.Subscribe = channel.unary_stream(
                '/ros.rosout/Subscribe',
                request_serializer=ros__pb2.Empty.SerializeToString,
                response_deserializer=ros__pb2.rosgraph_msgs.Log.FromString,
                )


class rosoutServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Publish(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Subscribe(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_rosoutServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Publish': grpc.unary_unary_rpc_method_handler(
                    servicer.Publish,
                    request_deserializer=ros__pb2.rosgraph_msgs.Log.FromString,
                    response_serializer=ros__pb2.Empty.SerializeToString,
            ),
            'Subscribe': grpc.unary_stream_rpc_method_handler(
                    servicer.Subscribe,
                    request_deserializer=ros__pb2.Empty.FromString,
                    response_serializer=ros__pb2.rosgraph_msgs.Log.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ros.rosout', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class rosout(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Publish(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ros.rosout/Publish',
            ros__pb2.rosgraph_msgs.Log.SerializeToString,
            ros__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Subscribe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/ros.rosout/Subscribe',
            ros__pb2.Empty.SerializeToString,
            ros__pb2.rosgraph_msgs.Log.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class rosout_aggStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Publish = channel.unary_unary(
                '/ros.rosout_agg/Publish',
                request_serializer=ros__pb2.rosgraph_msgs.Log.SerializeToString,
                response_deserializer=ros__pb2.Empty.FromString,
                )
        self.Subscribe = channel.unary_stream(
                '/ros.rosout_agg/Subscribe',
                request_serializer=ros__pb2.Empty.SerializeToString,
                response_deserializer=ros__pb2.rosgraph_msgs.Log.FromString,
                )


class rosout_aggServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Publish(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Subscribe(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_rosout_aggServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Publish': grpc.unary_unary_rpc_method_handler(
                    servicer.Publish,
                    request_deserializer=ros__pb2.rosgraph_msgs.Log.FromString,
                    response_serializer=ros__pb2.Empty.SerializeToString,
            ),
            'Subscribe': grpc.unary_stream_rpc_method_handler(
                    servicer.Subscribe,
                    request_deserializer=ros__pb2.Empty.FromString,
                    response_serializer=ros__pb2.rosgraph_msgs.Log.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ros.rosout_agg', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class rosout_agg(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Publish(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ros.rosout_agg/Publish',
            ros__pb2.rosgraph_msgs.Log.SerializeToString,
            ros__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Subscribe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/ros.rosout_agg/Subscribe',
            ros__pb2.Empty.SerializeToString,
            ros__pb2.rosgraph_msgs.Log.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class usb_cam_camera_infoStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Publish = channel.unary_unary(
                '/ros.usb_cam_camera_info/Publish',
                request_serializer=ros__pb2.sensor_msgs.CameraInfo.SerializeToString,
                response_deserializer=ros__pb2.Empty.FromString,
                )
        self.Subscribe = channel.unary_stream(
                '/ros.usb_cam_camera_info/Subscribe',
                request_serializer=ros__pb2.Empty.SerializeToString,
                response_deserializer=ros__pb2.sensor_msgs.CameraInfo.FromString,
                )


class usb_cam_camera_infoServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Publish(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Subscribe(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_usb_cam_camera_infoServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Publish': grpc.unary_unary_rpc_method_handler(
                    servicer.Publish,
                    request_deserializer=ros__pb2.sensor_msgs.CameraInfo.FromString,
                    response_serializer=ros__pb2.Empty.SerializeToString,
            ),
            'Subscribe': grpc.unary_stream_rpc_method_handler(
                    servicer.Subscribe,
                    request_deserializer=ros__pb2.Empty.FromString,
                    response_serializer=ros__pb2.sensor_msgs.CameraInfo.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ros.usb_cam_camera_info', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class usb_cam_camera_info(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Publish(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ros.usb_cam_camera_info/Publish',
            ros__pb2.sensor_msgs.CameraInfo.SerializeToString,
            ros__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Subscribe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/ros.usb_cam_camera_info/Subscribe',
            ros__pb2.Empty.SerializeToString,
            ros__pb2.sensor_msgs.CameraInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class usb_cam_image_rawStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Publish = channel.unary_unary(
                '/ros.usb_cam_image_raw/Publish',
                request_serializer=ros__pb2.sensor_msgs.Image.SerializeToString,
                response_deserializer=ros__pb2.Empty.FromString,
                )
        self.Subscribe = channel.unary_stream(
                '/ros.usb_cam_image_raw/Subscribe',
                request_serializer=ros__pb2.Empty.SerializeToString,
                response_deserializer=ros__pb2.sensor_msgs.Image.FromString,
                )


class usb_cam_image_rawServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Publish(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Subscribe(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_usb_cam_image_rawServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Publish': grpc.unary_unary_rpc_method_handler(
                    servicer.Publish,
                    request_deserializer=ros__pb2.sensor_msgs.Image.FromString,
                    response_serializer=ros__pb2.Empty.SerializeToString,
            ),
            'Subscribe': grpc.unary_stream_rpc_method_handler(
                    servicer.Subscribe,
                    request_deserializer=ros__pb2.Empty.FromString,
                    response_serializer=ros__pb2.sensor_msgs.Image.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ros.usb_cam_image_raw', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class usb_cam_image_raw(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Publish(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ros.usb_cam_image_raw/Publish',
            ros__pb2.sensor_msgs.Image.SerializeToString,
            ros__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Subscribe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/ros.usb_cam_image_raw/Subscribe',
            ros__pb2.Empty.SerializeToString,
            ros__pb2.sensor_msgs.Image.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class usb_cam_image_raw_compressedStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Publish = channel.unary_unary(
                '/ros.usb_cam_image_raw_compressed/Publish',
                request_serializer=ros__pb2.sensor_msgs.CompressedImage.SerializeToString,
                response_deserializer=ros__pb2.Empty.FromString,
                )
        self.Subscribe = channel.unary_stream(
                '/ros.usb_cam_image_raw_compressed/Subscribe',
                request_serializer=ros__pb2.Empty.SerializeToString,
                response_deserializer=ros__pb2.sensor_msgs.CompressedImage.FromString,
                )


class usb_cam_image_raw_compressedServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Publish(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Subscribe(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_usb_cam_image_raw_compressedServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Publish': grpc.unary_unary_rpc_method_handler(
                    servicer.Publish,
                    request_deserializer=ros__pb2.sensor_msgs.CompressedImage.FromString,
                    response_serializer=ros__pb2.Empty.SerializeToString,
            ),
            'Subscribe': grpc.unary_stream_rpc_method_handler(
                    servicer.Subscribe,
                    request_deserializer=ros__pb2.Empty.FromString,
                    response_serializer=ros__pb2.sensor_msgs.CompressedImage.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ros.usb_cam_image_raw_compressed', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class usb_cam_image_raw_compressed(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Publish(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ros.usb_cam_image_raw_compressed/Publish',
            ros__pb2.sensor_msgs.CompressedImage.SerializeToString,
            ros__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Subscribe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/ros.usb_cam_image_raw_compressed/Subscribe',
            ros__pb2.Empty.SerializeToString,
            ros__pb2.sensor_msgs.CompressedImage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class usb_cam_image_raw_compressed_parameter_descriptionsStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Publish = channel.unary_unary(
                '/ros.usb_cam_image_raw_compressed_parameter_descriptions/Publish',
                request_serializer=ros__pb2.dynamic_reconfigure.ConfigDescription.SerializeToString,
                response_deserializer=ros__pb2.Empty.FromString,
                )
        self.Subscribe = channel.unary_stream(
                '/ros.usb_cam_image_raw_compressed_parameter_descriptions/Subscribe',
                request_serializer=ros__pb2.Empty.SerializeToString,
                response_deserializer=ros__pb2.dynamic_reconfigure.ConfigDescription.FromString,
                )


class usb_cam_image_raw_compressed_parameter_descriptionsServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Publish(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Subscribe(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_usb_cam_image_raw_compressed_parameter_descriptionsServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Publish': grpc.unary_unary_rpc_method_handler(
                    servicer.Publish,
                    request_deserializer=ros__pb2.dynamic_reconfigure.ConfigDescription.FromString,
                    response_serializer=ros__pb2.Empty.SerializeToString,
            ),
            'Subscribe': grpc.unary_stream_rpc_method_handler(
                    servicer.Subscribe,
                    request_deserializer=ros__pb2.Empty.FromString,
                    response_serializer=ros__pb2.dynamic_reconfigure.ConfigDescription.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ros.usb_cam_image_raw_compressed_parameter_descriptions', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class usb_cam_image_raw_compressed_parameter_descriptions(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Publish(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ros.usb_cam_image_raw_compressed_parameter_descriptions/Publish',
            ros__pb2.dynamic_reconfigure.ConfigDescription.SerializeToString,
            ros__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Subscribe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/ros.usb_cam_image_raw_compressed_parameter_descriptions/Subscribe',
            ros__pb2.Empty.SerializeToString,
            ros__pb2.dynamic_reconfigure.ConfigDescription.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class usb_cam_image_raw_compressed_parameter_updatesStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Publish = channel.unary_unary(
                '/ros.usb_cam_image_raw_compressed_parameter_updates/Publish',
                request_serializer=ros__pb2.dynamic_reconfigure.Config.SerializeToString,
                response_deserializer=ros__pb2.Empty.FromString,
                )
        self.Subscribe = channel.unary_stream(
                '/ros.usb_cam_image_raw_compressed_parameter_updates/Subscribe',
                request_serializer=ros__pb2.Empty.SerializeToString,
                response_deserializer=ros__pb2.dynamic_reconfigure.Config.FromString,
                )


class usb_cam_image_raw_compressed_parameter_updatesServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Publish(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Subscribe(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_usb_cam_image_raw_compressed_parameter_updatesServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Publish': grpc.unary_unary_rpc_method_handler(
                    servicer.Publish,
                    request_deserializer=ros__pb2.dynamic_reconfigure.Config.FromString,
                    response_serializer=ros__pb2.Empty.SerializeToString,
            ),
            'Subscribe': grpc.unary_stream_rpc_method_handler(
                    servicer.Subscribe,
                    request_deserializer=ros__pb2.Empty.FromString,
                    response_serializer=ros__pb2.dynamic_reconfigure.Config.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ros.usb_cam_image_raw_compressed_parameter_updates', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class usb_cam_image_raw_compressed_parameter_updates(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Publish(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ros.usb_cam_image_raw_compressed_parameter_updates/Publish',
            ros__pb2.dynamic_reconfigure.Config.SerializeToString,
            ros__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Subscribe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/ros.usb_cam_image_raw_compressed_parameter_updates/Subscribe',
            ros__pb2.Empty.SerializeToString,
            ros__pb2.dynamic_reconfigure.Config.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class usb_cam_image_raw_compressedDepthStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Publish = channel.unary_unary(
                '/ros.usb_cam_image_raw_compressedDepth/Publish',
                request_serializer=ros__pb2.sensor_msgs.CompressedImage.SerializeToString,
                response_deserializer=ros__pb2.Empty.FromString,
                )
        self.Subscribe = channel.unary_stream(
                '/ros.usb_cam_image_raw_compressedDepth/Subscribe',
                request_serializer=ros__pb2.Empty.SerializeToString,
                response_deserializer=ros__pb2.sensor_msgs.CompressedImage.FromString,
                )


class usb_cam_image_raw_compressedDepthServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Publish(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Subscribe(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_usb_cam_image_raw_compressedDepthServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Publish': grpc.unary_unary_rpc_method_handler(
                    servicer.Publish,
                    request_deserializer=ros__pb2.sensor_msgs.CompressedImage.FromString,
                    response_serializer=ros__pb2.Empty.SerializeToString,
            ),
            'Subscribe': grpc.unary_stream_rpc_method_handler(
                    servicer.Subscribe,
                    request_deserializer=ros__pb2.Empty.FromString,
                    response_serializer=ros__pb2.sensor_msgs.CompressedImage.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ros.usb_cam_image_raw_compressedDepth', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class usb_cam_image_raw_compressedDepth(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Publish(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ros.usb_cam_image_raw_compressedDepth/Publish',
            ros__pb2.sensor_msgs.CompressedImage.SerializeToString,
            ros__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Subscribe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/ros.usb_cam_image_raw_compressedDepth/Subscribe',
            ros__pb2.Empty.SerializeToString,
            ros__pb2.sensor_msgs.CompressedImage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class usb_cam_image_raw_compressedDepth_parameter_descriptionsStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Publish = channel.unary_unary(
                '/ros.usb_cam_image_raw_compressedDepth_parameter_descriptions/Publish',
                request_serializer=ros__pb2.dynamic_reconfigure.ConfigDescription.SerializeToString,
                response_deserializer=ros__pb2.Empty.FromString,
                )
        self.Subscribe = channel.unary_stream(
                '/ros.usb_cam_image_raw_compressedDepth_parameter_descriptions/Subscribe',
                request_serializer=ros__pb2.Empty.SerializeToString,
                response_deserializer=ros__pb2.dynamic_reconfigure.ConfigDescription.FromString,
                )


class usb_cam_image_raw_compressedDepth_parameter_descriptionsServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Publish(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Subscribe(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_usb_cam_image_raw_compressedDepth_parameter_descriptionsServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Publish': grpc.unary_unary_rpc_method_handler(
                    servicer.Publish,
                    request_deserializer=ros__pb2.dynamic_reconfigure.ConfigDescription.FromString,
                    response_serializer=ros__pb2.Empty.SerializeToString,
            ),
            'Subscribe': grpc.unary_stream_rpc_method_handler(
                    servicer.Subscribe,
                    request_deserializer=ros__pb2.Empty.FromString,
                    response_serializer=ros__pb2.dynamic_reconfigure.ConfigDescription.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ros.usb_cam_image_raw_compressedDepth_parameter_descriptions', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class usb_cam_image_raw_compressedDepth_parameter_descriptions(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Publish(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ros.usb_cam_image_raw_compressedDepth_parameter_descriptions/Publish',
            ros__pb2.dynamic_reconfigure.ConfigDescription.SerializeToString,
            ros__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Subscribe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/ros.usb_cam_image_raw_compressedDepth_parameter_descriptions/Subscribe',
            ros__pb2.Empty.SerializeToString,
            ros__pb2.dynamic_reconfigure.ConfigDescription.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class usb_cam_image_raw_compressedDepth_parameter_updatesStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Publish = channel.unary_unary(
                '/ros.usb_cam_image_raw_compressedDepth_parameter_updates/Publish',
                request_serializer=ros__pb2.dynamic_reconfigure.Config.SerializeToString,
                response_deserializer=ros__pb2.Empty.FromString,
                )
        self.Subscribe = channel.unary_stream(
                '/ros.usb_cam_image_raw_compressedDepth_parameter_updates/Subscribe',
                request_serializer=ros__pb2.Empty.SerializeToString,
                response_deserializer=ros__pb2.dynamic_reconfigure.Config.FromString,
                )


class usb_cam_image_raw_compressedDepth_parameter_updatesServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Publish(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Subscribe(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_usb_cam_image_raw_compressedDepth_parameter_updatesServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Publish': grpc.unary_unary_rpc_method_handler(
                    servicer.Publish,
                    request_deserializer=ros__pb2.dynamic_reconfigure.Config.FromString,
                    response_serializer=ros__pb2.Empty.SerializeToString,
            ),
            'Subscribe': grpc.unary_stream_rpc_method_handler(
                    servicer.Subscribe,
                    request_deserializer=ros__pb2.Empty.FromString,
                    response_serializer=ros__pb2.dynamic_reconfigure.Config.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ros.usb_cam_image_raw_compressedDepth_parameter_updates', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class usb_cam_image_raw_compressedDepth_parameter_updates(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Publish(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ros.usb_cam_image_raw_compressedDepth_parameter_updates/Publish',
            ros__pb2.dynamic_reconfigure.Config.SerializeToString,
            ros__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Subscribe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/ros.usb_cam_image_raw_compressedDepth_parameter_updates/Subscribe',
            ros__pb2.Empty.SerializeToString,
            ros__pb2.dynamic_reconfigure.Config.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class usb_cam_image_raw_theoraStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Publish = channel.unary_unary(
                '/ros.usb_cam_image_raw_theora/Publish',
                request_serializer=ros__pb2.theora_image_transport.Packet.SerializeToString,
                response_deserializer=ros__pb2.Empty.FromString,
                )
        self.Subscribe = channel.unary_stream(
                '/ros.usb_cam_image_raw_theora/Subscribe',
                request_serializer=ros__pb2.Empty.SerializeToString,
                response_deserializer=ros__pb2.theora_image_transport.Packet.FromString,
                )


class usb_cam_image_raw_theoraServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Publish(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Subscribe(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_usb_cam_image_raw_theoraServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Publish': grpc.unary_unary_rpc_method_handler(
                    servicer.Publish,
                    request_deserializer=ros__pb2.theora_image_transport.Packet.FromString,
                    response_serializer=ros__pb2.Empty.SerializeToString,
            ),
            'Subscribe': grpc.unary_stream_rpc_method_handler(
                    servicer.Subscribe,
                    request_deserializer=ros__pb2.Empty.FromString,
                    response_serializer=ros__pb2.theora_image_transport.Packet.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ros.usb_cam_image_raw_theora', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class usb_cam_image_raw_theora(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Publish(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ros.usb_cam_image_raw_theora/Publish',
            ros__pb2.theora_image_transport.Packet.SerializeToString,
            ros__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Subscribe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/ros.usb_cam_image_raw_theora/Subscribe',
            ros__pb2.Empty.SerializeToString,
            ros__pb2.theora_image_transport.Packet.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class usb_cam_image_raw_theora_parameter_descriptionsStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Publish = channel.unary_unary(
                '/ros.usb_cam_image_raw_theora_parameter_descriptions/Publish',
                request_serializer=ros__pb2.dynamic_reconfigure.ConfigDescription.SerializeToString,
                response_deserializer=ros__pb2.Empty.FromString,
                )
        self.Subscribe = channel.unary_stream(
                '/ros.usb_cam_image_raw_theora_parameter_descriptions/Subscribe',
                request_serializer=ros__pb2.Empty.SerializeToString,
                response_deserializer=ros__pb2.dynamic_reconfigure.ConfigDescription.FromString,
                )


class usb_cam_image_raw_theora_parameter_descriptionsServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Publish(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Subscribe(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_usb_cam_image_raw_theora_parameter_descriptionsServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Publish': grpc.unary_unary_rpc_method_handler(
                    servicer.Publish,
                    request_deserializer=ros__pb2.dynamic_reconfigure.ConfigDescription.FromString,
                    response_serializer=ros__pb2.Empty.SerializeToString,
            ),
            'Subscribe': grpc.unary_stream_rpc_method_handler(
                    servicer.Subscribe,
                    request_deserializer=ros__pb2.Empty.FromString,
                    response_serializer=ros__pb2.dynamic_reconfigure.ConfigDescription.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ros.usb_cam_image_raw_theora_parameter_descriptions', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class usb_cam_image_raw_theora_parameter_descriptions(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Publish(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ros.usb_cam_image_raw_theora_parameter_descriptions/Publish',
            ros__pb2.dynamic_reconfigure.ConfigDescription.SerializeToString,
            ros__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Subscribe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/ros.usb_cam_image_raw_theora_parameter_descriptions/Subscribe',
            ros__pb2.Empty.SerializeToString,
            ros__pb2.dynamic_reconfigure.ConfigDescription.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class usb_cam_image_raw_theora_parameter_updatesStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Publish = channel.unary_unary(
                '/ros.usb_cam_image_raw_theora_parameter_updates/Publish',
                request_serializer=ros__pb2.dynamic_reconfigure.Config.SerializeToString,
                response_deserializer=ros__pb2.Empty.FromString,
                )
        self.Subscribe = channel.unary_stream(
                '/ros.usb_cam_image_raw_theora_parameter_updates/Subscribe',
                request_serializer=ros__pb2.Empty.SerializeToString,
                response_deserializer=ros__pb2.dynamic_reconfigure.Config.FromString,
                )


class usb_cam_image_raw_theora_parameter_updatesServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Publish(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Subscribe(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_usb_cam_image_raw_theora_parameter_updatesServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Publish': grpc.unary_unary_rpc_method_handler(
                    servicer.Publish,
                    request_deserializer=ros__pb2.dynamic_reconfigure.Config.FromString,
                    response_serializer=ros__pb2.Empty.SerializeToString,
            ),
            'Subscribe': grpc.unary_stream_rpc_method_handler(
                    servicer.Subscribe,
                    request_deserializer=ros__pb2.Empty.FromString,
                    response_serializer=ros__pb2.dynamic_reconfigure.Config.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ros.usb_cam_image_raw_theora_parameter_updates', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class usb_cam_image_raw_theora_parameter_updates(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Publish(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ros.usb_cam_image_raw_theora_parameter_updates/Publish',
            ros__pb2.dynamic_reconfigure.Config.SerializeToString,
            ros__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Subscribe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/ros.usb_cam_image_raw_theora_parameter_updates/Subscribe',
            ros__pb2.Empty.SerializeToString,
            ros__pb2.dynamic_reconfigure.Config.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class image_view_get_loggersStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Call = channel.unary_unary(
                '/ros.image_view_get_loggers/Call',
                request_serializer=ros__pb2.roscpp.GetLoggersRequest.SerializeToString,
                response_deserializer=ros__pb2.roscpp.GetLoggersResponse.FromString,
                )


class image_view_get_loggersServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Call(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_image_view_get_loggersServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Call': grpc.unary_unary_rpc_method_handler(
                    servicer.Call,
                    request_deserializer=ros__pb2.roscpp.GetLoggersRequest.FromString,
                    response_serializer=ros__pb2.roscpp.GetLoggersResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ros.image_view_get_loggers', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class image_view_get_loggers(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Call(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ros.image_view_get_loggers/Call',
            ros__pb2.roscpp.GetLoggersRequest.SerializeToString,
            ros__pb2.roscpp.GetLoggersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class image_view_listStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Call = channel.unary_unary(
                '/ros.image_view_list/Call',
                request_serializer=ros__pb2.nodelet.NodeletListRequest.SerializeToString,
                response_deserializer=ros__pb2.nodelet.NodeletListResponse.FromString,
                )


class image_view_listServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Call(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_image_view_listServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Call': grpc.unary_unary_rpc_method_handler(
                    servicer.Call,
                    request_deserializer=ros__pb2.nodelet.NodeletListRequest.FromString,
                    response_serializer=ros__pb2.nodelet.NodeletListResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ros.image_view_list', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class image_view_list(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Call(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ros.image_view_list/Call',
            ros__pb2.nodelet.NodeletListRequest.SerializeToString,
            ros__pb2.nodelet.NodeletListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class image_view_load_nodeletStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Call = channel.unary_unary(
                '/ros.image_view_load_nodelet/Call',
                request_serializer=ros__pb2.nodelet.NodeletLoadRequest.SerializeToString,
                response_deserializer=ros__pb2.nodelet.NodeletLoadResponse.FromString,
                )


class image_view_load_nodeletServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Call(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_image_view_load_nodeletServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Call': grpc.unary_unary_rpc_method_handler(
                    servicer.Call,
                    request_deserializer=ros__pb2.nodelet.NodeletLoadRequest.FromString,
                    response_serializer=ros__pb2.nodelet.NodeletLoadResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ros.image_view_load_nodelet', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class image_view_load_nodelet(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Call(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ros.image_view_load_nodelet/Call',
            ros__pb2.nodelet.NodeletLoadRequest.SerializeToString,
            ros__pb2.nodelet.NodeletLoadResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class image_view_set_logger_levelStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Call = channel.unary_unary(
                '/ros.image_view_set_logger_level/Call',
                request_serializer=ros__pb2.roscpp.SetLoggerLevelRequest.SerializeToString,
                response_deserializer=ros__pb2.roscpp.SetLoggerLevelResponse.FromString,
                )


class image_view_set_logger_levelServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Call(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_image_view_set_logger_levelServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Call': grpc.unary_unary_rpc_method_handler(
                    servicer.Call,
                    request_deserializer=ros__pb2.roscpp.SetLoggerLevelRequest.FromString,
                    response_serializer=ros__pb2.roscpp.SetLoggerLevelResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ros.image_view_set_logger_level', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class image_view_set_logger_level(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Call(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ros.image_view_set_logger_level/Call',
            ros__pb2.roscpp.SetLoggerLevelRequest.SerializeToString,
            ros__pb2.roscpp.SetLoggerLevelResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class image_view_set_parametersStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Call = channel.unary_unary(
                '/ros.image_view_set_parameters/Call',
                request_serializer=ros__pb2.dynamic_reconfigure.ReconfigureRequest.SerializeToString,
                response_deserializer=ros__pb2.dynamic_reconfigure.ReconfigureResponse.FromString,
                )


class image_view_set_parametersServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Call(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_image_view_set_parametersServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Call': grpc.unary_unary_rpc_method_handler(
                    servicer.Call,
                    request_deserializer=ros__pb2.dynamic_reconfigure.ReconfigureRequest.FromString,
                    response_serializer=ros__pb2.dynamic_reconfigure.ReconfigureResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ros.image_view_set_parameters', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class image_view_set_parameters(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Call(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ros.image_view_set_parameters/Call',
            ros__pb2.dynamic_reconfigure.ReconfigureRequest.SerializeToString,
            ros__pb2.dynamic_reconfigure.ReconfigureResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class image_view_unload_nodeletStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Call = channel.unary_unary(
                '/ros.image_view_unload_nodelet/Call',
                request_serializer=ros__pb2.nodelet.NodeletUnloadRequest.SerializeToString,
                response_deserializer=ros__pb2.nodelet.NodeletUnloadResponse.FromString,
                )


class image_view_unload_nodeletServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Call(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_image_view_unload_nodeletServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Call': grpc.unary_unary_rpc_method_handler(
                    servicer.Call,
                    request_deserializer=ros__pb2.nodelet.NodeletUnloadRequest.FromString,
                    response_serializer=ros__pb2.nodelet.NodeletUnloadResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ros.image_view_unload_nodelet', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class image_view_unload_nodelet(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Call(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ros.image_view_unload_nodelet/Call',
            ros__pb2.nodelet.NodeletUnloadRequest.SerializeToString,
            ros__pb2.nodelet.NodeletUnloadResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class rosout_get_loggersStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Call = channel.unary_unary(
                '/ros.rosout_get_loggers/Call',
                request_serializer=ros__pb2.roscpp.GetLoggersRequest.SerializeToString,
                response_deserializer=ros__pb2.roscpp.GetLoggersResponse.FromString,
                )


class rosout_get_loggersServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Call(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_rosout_get_loggersServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Call': grpc.unary_unary_rpc_method_handler(
                    servicer.Call,
                    request_deserializer=ros__pb2.roscpp.GetLoggersRequest.FromString,
                    response_serializer=ros__pb2.roscpp.GetLoggersResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ros.rosout_get_loggers', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class rosout_get_loggers(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Call(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ros.rosout_get_loggers/Call',
            ros__pb2.roscpp.GetLoggersRequest.SerializeToString,
            ros__pb2.roscpp.GetLoggersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class rosout_set_logger_levelStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Call = channel.unary_unary(
                '/ros.rosout_set_logger_level/Call',
                request_serializer=ros__pb2.roscpp.SetLoggerLevelRequest.SerializeToString,
                response_deserializer=ros__pb2.roscpp.SetLoggerLevelResponse.FromString,
                )


class rosout_set_logger_levelServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Call(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_rosout_set_logger_levelServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Call': grpc.unary_unary_rpc_method_handler(
                    servicer.Call,
                    request_deserializer=ros__pb2.roscpp.SetLoggerLevelRequest.FromString,
                    response_serializer=ros__pb2.roscpp.SetLoggerLevelResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ros.rosout_set_logger_level', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class rosout_set_logger_level(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Call(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ros.rosout_set_logger_level/Call',
            ros__pb2.roscpp.SetLoggerLevelRequest.SerializeToString,
            ros__pb2.roscpp.SetLoggerLevelResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class usb_cam_get_loggersStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Call = channel.unary_unary(
                '/ros.usb_cam_get_loggers/Call',
                request_serializer=ros__pb2.roscpp.GetLoggersRequest.SerializeToString,
                response_deserializer=ros__pb2.roscpp.GetLoggersResponse.FromString,
                )


class usb_cam_get_loggersServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Call(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_usb_cam_get_loggersServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Call': grpc.unary_unary_rpc_method_handler(
                    servicer.Call,
                    request_deserializer=ros__pb2.roscpp.GetLoggersRequest.FromString,
                    response_serializer=ros__pb2.roscpp.GetLoggersResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ros.usb_cam_get_loggers', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class usb_cam_get_loggers(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Call(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ros.usb_cam_get_loggers/Call',
            ros__pb2.roscpp.GetLoggersRequest.SerializeToString,
            ros__pb2.roscpp.GetLoggersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class usb_cam_image_raw_compressed_set_parametersStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Call = channel.unary_unary(
                '/ros.usb_cam_image_raw_compressed_set_parameters/Call',
                request_serializer=ros__pb2.dynamic_reconfigure.ReconfigureRequest.SerializeToString,
                response_deserializer=ros__pb2.dynamic_reconfigure.ReconfigureResponse.FromString,
                )


class usb_cam_image_raw_compressed_set_parametersServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Call(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_usb_cam_image_raw_compressed_set_parametersServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Call': grpc.unary_unary_rpc_method_handler(
                    servicer.Call,
                    request_deserializer=ros__pb2.dynamic_reconfigure.ReconfigureRequest.FromString,
                    response_serializer=ros__pb2.dynamic_reconfigure.ReconfigureResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ros.usb_cam_image_raw_compressed_set_parameters', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class usb_cam_image_raw_compressed_set_parameters(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Call(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ros.usb_cam_image_raw_compressed_set_parameters/Call',
            ros__pb2.dynamic_reconfigure.ReconfigureRequest.SerializeToString,
            ros__pb2.dynamic_reconfigure.ReconfigureResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class usb_cam_image_raw_compressedDepth_set_parametersStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Call = channel.unary_unary(
                '/ros.usb_cam_image_raw_compressedDepth_set_parameters/Call',
                request_serializer=ros__pb2.dynamic_reconfigure.ReconfigureRequest.SerializeToString,
                response_deserializer=ros__pb2.dynamic_reconfigure.ReconfigureResponse.FromString,
                )


class usb_cam_image_raw_compressedDepth_set_parametersServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Call(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_usb_cam_image_raw_compressedDepth_set_parametersServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Call': grpc.unary_unary_rpc_method_handler(
                    servicer.Call,
                    request_deserializer=ros__pb2.dynamic_reconfigure.ReconfigureRequest.FromString,
                    response_serializer=ros__pb2.dynamic_reconfigure.ReconfigureResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ros.usb_cam_image_raw_compressedDepth_set_parameters', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class usb_cam_image_raw_compressedDepth_set_parameters(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Call(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ros.usb_cam_image_raw_compressedDepth_set_parameters/Call',
            ros__pb2.dynamic_reconfigure.ReconfigureRequest.SerializeToString,
            ros__pb2.dynamic_reconfigure.ReconfigureResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class usb_cam_image_raw_theora_set_parametersStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Call = channel.unary_unary(
                '/ros.usb_cam_image_raw_theora_set_parameters/Call',
                request_serializer=ros__pb2.dynamic_reconfigure.ReconfigureRequest.SerializeToString,
                response_deserializer=ros__pb2.dynamic_reconfigure.ReconfigureResponse.FromString,
                )


class usb_cam_image_raw_theora_set_parametersServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Call(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_usb_cam_image_raw_theora_set_parametersServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Call': grpc.unary_unary_rpc_method_handler(
                    servicer.Call,
                    request_deserializer=ros__pb2.dynamic_reconfigure.ReconfigureRequest.FromString,
                    response_serializer=ros__pb2.dynamic_reconfigure.ReconfigureResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ros.usb_cam_image_raw_theora_set_parameters', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class usb_cam_image_raw_theora_set_parameters(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Call(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ros.usb_cam_image_raw_theora_set_parameters/Call',
            ros__pb2.dynamic_reconfigure.ReconfigureRequest.SerializeToString,
            ros__pb2.dynamic_reconfigure.ReconfigureResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class usb_cam_set_camera_infoStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Call = channel.unary_unary(
                '/ros.usb_cam_set_camera_info/Call',
                request_serializer=ros__pb2.sensor_msgs.SetCameraInfoRequest.SerializeToString,
                response_deserializer=ros__pb2.sensor_msgs.SetCameraInfoResponse.FromString,
                )


class usb_cam_set_camera_infoServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Call(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_usb_cam_set_camera_infoServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Call': grpc.unary_unary_rpc_method_handler(
                    servicer.Call,
                    request_deserializer=ros__pb2.sensor_msgs.SetCameraInfoRequest.FromString,
                    response_serializer=ros__pb2.sensor_msgs.SetCameraInfoResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ros.usb_cam_set_camera_info', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class usb_cam_set_camera_info(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Call(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ros.usb_cam_set_camera_info/Call',
            ros__pb2.sensor_msgs.SetCameraInfoRequest.SerializeToString,
            ros__pb2.sensor_msgs.SetCameraInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class usb_cam_set_logger_levelStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Call = channel.unary_unary(
                '/ros.usb_cam_set_logger_level/Call',
                request_serializer=ros__pb2.roscpp.SetLoggerLevelRequest.SerializeToString,
                response_deserializer=ros__pb2.roscpp.SetLoggerLevelResponse.FromString,
                )


class usb_cam_set_logger_levelServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Call(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_usb_cam_set_logger_levelServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Call': grpc.unary_unary_rpc_method_handler(
                    servicer.Call,
                    request_deserializer=ros__pb2.roscpp.SetLoggerLevelRequest.FromString,
                    response_serializer=ros__pb2.roscpp.SetLoggerLevelResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ros.usb_cam_set_logger_level', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class usb_cam_set_logger_level(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Call(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ros.usb_cam_set_logger_level/Call',
            ros__pb2.roscpp.SetLoggerLevelRequest.SerializeToString,
            ros__pb2.roscpp.SetLoggerLevelResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class usb_cam_start_captureStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Call = channel.unary_unary(
                '/ros.usb_cam_start_capture/Call',
                request_serializer=ros__pb2.std_srvs.EmptyRequest.SerializeToString,
                response_deserializer=ros__pb2.std_srvs.EmptyResponse.FromString,
                )


class usb_cam_start_captureServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Call(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_usb_cam_start_captureServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Call': grpc.unary_unary_rpc_method_handler(
                    servicer.Call,
                    request_deserializer=ros__pb2.std_srvs.EmptyRequest.FromString,
                    response_serializer=ros__pb2.std_srvs.EmptyResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ros.usb_cam_start_capture', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class usb_cam_start_capture(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Call(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ros.usb_cam_start_capture/Call',
            ros__pb2.std_srvs.EmptyRequest.SerializeToString,
            ros__pb2.std_srvs.EmptyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class usb_cam_stop_captureStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Call = channel.unary_unary(
                '/ros.usb_cam_stop_capture/Call',
                request_serializer=ros__pb2.std_srvs.EmptyRequest.SerializeToString,
                response_deserializer=ros__pb2.std_srvs.EmptyResponse.FromString,
                )


class usb_cam_stop_captureServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Call(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_usb_cam_stop_captureServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Call': grpc.unary_unary_rpc_method_handler(
                    servicer.Call,
                    request_deserializer=ros__pb2.std_srvs.EmptyRequest.FromString,
                    response_serializer=ros__pb2.std_srvs.EmptyResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'ros.usb_cam_stop_capture', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class usb_cam_stop_capture(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Call(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/ros.usb_cam_stop_capture/Call',
            ros__pb2.std_srvs.EmptyRequest.SerializeToString,
            ros__pb2.std_srvs.EmptyResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
